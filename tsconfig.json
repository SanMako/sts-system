{
  "compilerOptions": {
    "target": "esnext", // 指定ECMAScript目标版本，esnext为最新版本
    "useDefineForClassFields": true, 
    "allowSyntheticDefaultImports": true, // 允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。
    "module": "esnext", // 指定生成哪个模块系统代码，esnext为最新版本
    "moduleResolution": "node",   // 决定如何处理模块。
    "strict": true, // 启用所有严格类型检查选项。
    "noImplicitAny": false, // 在表达式和声明上有隐含的 any类型时报错。
    "baseUrl": ".", // 解析非相对模块名的基准目录。查看 模块解析文档了解详情。
    "jsx": "preserve", // 在 .tsx文件里支持JSX
    "sourceMap": true, // 生成相应的 .map文件。
    "noUnusedLocals": true, // 若有未使用的局部变量则抛错。
    "noUnusedParameters": true, // 若有未使用的参数则抛错。
    "resolveJsonModule": true, 
    "esModuleInterop": true,
    "lib": ["esnext", "dom"], // 编译过程中需要引入的库文件的列表。
    "types": ["vite/client", "node"],  // 要包含的类型声明文件名列表。
    "typeRoots": [
        "node_modules/@types"
    ], // 要包含的类型声明文件路径列表。
    "paths": {
        "/@/*": ["src/*"]
    } // 模块名到基于 baseUrl的路径映射的列表。查看 模块解析文档了解详情。
  },
  // ↓指定一个匹配列表（属于自动指定该路径下的所有ts相关文件)
  "include": ["src/**/*.ts", "src/**/*.d.ts", "src/**/*.tsx", "src/**/*.vue"],
  "exclude": [
    "node_modules/@types"
  ] // 指定一个排除列表（include的反向操作）
}
